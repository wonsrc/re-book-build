plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.re_book'
version = '0.0.1-SNAPSHOT'

bootJar {
    archiveBaseName = 'RE_BOOK'  // JAR 파일 이름 설정
    version = '0.0.1-SNAPSHOT'  // 버전 설정
    enabled = true; // 실행 가능한 JAR만 생성하도록 설정
}

jar {
    enabled = false; // 기본 JAR 생성 비활성화
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:juni dt-platform-launcher'

    // spring boot에서 jsp를 사용하기 위한 설정
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'jakarta.servlet:jakarta.servlet-api'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'

    // 쿼리 파라미터 추가 외부 로그 남기기
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    // json web token 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // spring에서 redis사용을 위한 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // querydsl
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // 입력값 검증 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //스프링 시큐리티 모듈
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // spring-boot-starter-mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // 자바 언어를 통해 smtp 통신을 할 수 있게 하는 라이브러리
    implementation 'jakarta.mail:jakarta.mail-api:2.1.2'

    // OpenCSV 사용
    implementation 'com.opencsv:opencsv:5.5.2'
    // 액츄에이터
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

tasks.named('test') {
    useJUnitPlatform()
}

/**
 //querydsl 추가 시작
 //queryDsl은 내부적으로 Entity 클래스를 인식해서 그와 비슷한 모양의 QClass를 제작합니다.
 //이 QClass를 이용해서 Entity의 타입을 검증할 수 있고, 그에 맞는 쿼리문을 builder 형태로
 //제작합니다.
 //밑에 작성된 내용은 QClass의 생성 디렉토리 지정 및 프로젝트 build 시 컴파일 명령문 등을
 //세팅해 놓은 코드입니다.
 */

def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}